package com.biehnary.auction.live_auction.Repository;

import com.biehnary.auction.live_auction.entity.AuctionStatus;
import com.biehnary.auction.live_auction.entity.Member;
import com.biehnary.auction.live_auction.entity.Product;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class ProductRepository {

  @PersistenceContext
  private EntityManager em;

  // == CRUD Operations ==
  public Product save(Product product) {
    if (product.getId() == null) {
      em.persist(product);
      return product;
    } else {
      // em.merge() returns a new persistent entity, not the original
      return em.merge(product);
    }
  }

  public Product findById(Long productId) {
    Product product = em.find(Product.class, productId);
    if (product == null) {
      throw new IllegalArgumentException("Product not found" + productId);
    }
    return product;
  }

  public List<Product> findAll() {
    return em.createQuery("select p from Product p", Product.class)
        .getResultList();
  }

  public void delete(Product product) {
    if (em.contains(product)) {
      em.remove(product);
    } else {
      // Merge detached entity before removal to avoid exceptions
      em.remove(em.merge(product));
    }
  }

  public void deleteById(Long productId) {
    em.remove(findById(productId));
  }

  public Long count() {
    return em.createQuery("select count(p) from Product p", Long.class)
        .getSingleResult();
  }

  public boolean existsById(Long productId) {
    Long result = em.createQuery("select count(p) from Product p where p.id = :id", Long.class)
        .setParameter("id", productId)
        .getSingleResult();
    return result > 0;
  }

  // == Auction Status ==
  public List<Product> findByAuctionStatus(AuctionStatus auctionStatus) {
    return em.createQuery("select p from Product p where p.auctionStatus = :status", Product.class)
        .setParameter("status", auctionStatus)
        .getResultList();
  }

  // == seller ==
  public List<Product> findBySeller(Member seller) {
    return em.createQuery("select p from Product p where p.seller = :seller", Product.class)
        .setParameter("seller", seller)
        .getResultList();
  }

  public List<Product> findAllOrderByRegisteredAt() {
    return em.createQuery("select p from Product p order by p.registeredAt asc", Product.class)
        .getResultList();
  }

  public List<Product> findByNameContaining(String keyword) {
    return em.createQuery("select p from Product p where p.name like :keyword", Product.class)
        .setParameter("keyword", "%" + keyword + "%")
        .getResultList();
  }


}
package com.biehnary.auction.live_auction.Repository;

import com.biehnary.auction.live_auction.entity.Member;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class MemberRepository {

  @PersistenceContext
  private EntityManager em;


  // == CRUD Operations ==
  public Member save(Member member) {
    if (member.getId() == null) {
      em.persist(member);
      return member;
    } else {
      return em.merge(member);
    }
  }

  public void delete(Member member) {
    if (em.contains(member)) {
      em.remove(member);
    } else {
      // Merge detached entity before removal to avoid exceptions
      em.remove(em.merge(member));
    }
  }

  public void deleteById(Long memberId) {
    em.remove(findById(memberId));
  }

  public Long count() {
    return em.createQuery("select count(m) from Member m", Long.class).getSingleResult();
  }

  // (throws exception if not found)
  public Member findById(Long memberId) {
    Member member = em.find(Member.class, memberId);
    if (member == null) {
      throw new IllegalArgumentException("Member not found: " + memberId);
    }
    return member;
  }

  public List<Member> findAll() {
    return em.createQuery("SELECT m FROM Member m", Member.class).getResultList();
  }

  public boolean existsById(Long memberId) {
    Long count = em.createQuery("select count(m) from Member m where m.id = :id", Long.class)
        .setParameter("id", memberId)
        .getSingleResult();
    return count > 0;
  }

  public boolean existsByUsername(String username) {
    Long count = em.createQuery("select count(m) from Member m where m.username = :username", Long.class)
        .setParameter("username", username)
        .getSingleResult();
    return count > 0;
  }

  public Member findByUserName(String username) {
    List<Member> results = em.createQuery("select m from Member m where m.username = :username", Member.class)
        .setParameter("username", username)
        .getResultList();
    return results.isEmpty() ? null : results.getFirst();
  }

  public List<Member> findByIsActiveTrue() {
    return em.createQuery("select m from Member m where m.isActive = true", Member.class)
        .getResultList();
  }


}
package com.biehnary.auction.live_auction.Repository;

import com.biehnary.auction.live_auction.entity.AuctionResult;
import com.biehnary.auction.live_auction.entity.Member;
import com.biehnary.auction.live_auction.entity.Product;
import com.biehnary.auction.live_auction.entity.ResultStatus;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import java.util.Optional;
import org.springframework.stereotype.Repository;

@Repository
public class AuctionResultRepository {

  @PersistenceContext
  private EntityManager em;

  // == CURD ==
  public AuctionResult save(AuctionResult auctionResult) {
    if (auctionResult.getId() == null) {
      em.persist(auctionResult);
      return auctionResult;
    } else {
      return em.merge(auctionResult);
    }
  }

  public Optional<AuctionResult> findById(Long id) {
    AuctionResult auctionResult = em.find(AuctionResult.class, id);
    return Optional.ofNullable(auctionResult);
  }

  public List<AuctionResult> findByWinner(Member winner) {
    return em.createQuery("select a from AuctionResult a where a.winner = :winner"
            + " order by a.auctionEndTime desc, a.finalPrice desc"  ,AuctionResult.class)
        .setParameter("winner", winner)
        .getResultList();
  }

  public List<AuctionResult> findByProduct(Product product) {
    return em.createQuery("select a from AuctionResult a where a.product = :product"
        + " order by a.auctionEndTime desc", AuctionResult.class)
        .setParameter("product", product)
        .getResultList();
  }

  public List<AuctionResult> findByStatus(ResultStatus status) {
    return em.createQuery("select a from AuctionResult a where a.status = :status", AuctionResult.class)
        .setParameter("status", status)
        .getResultList();
  }

  public List<AuctionResult> findAuctionHistoryByProductName(String name) {
    return em.createQuery("select a from AuctionResult a "
        + "join a.product p where p.name like :name "
            + "order by a.auctionEndTime desc", AuctionResult.class)
        .setParameter("name", "%" + name + "%")
        .getResultList();
  }










}
package com.biehnary.auction.live_auction.Repository;

import com.biehnary.auction.live_auction.entity.ChatMessage;
import com.biehnary.auction.live_auction.entity.Member;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import org.springframework.stereotype.Repository;

@Repository
public class ChatMessageRepository {

  @PersistenceContext
  private EntityManager em;

  public ChatMessage save(ChatMessage message) {
    em.persist(message);
    return message;
  }

  public Long count() {
    return em.createQuery("select count (c) from ChatMessage c", Long.class)
        .getSingleResult();
  }

  // == find tools ==

  public List<ChatMessage> findRecentMessages(int limit) {
    return em.createQuery("select c from ChatMessage c order by c.sendTime desc",
            ChatMessage.class)
        .setMaxResults(limit)
        .getResultList();
  }

  public List<ChatMessage> findBySender(Member sender) {
    return em.createQuery("select c from ChatMessage c where c.sender = :sender"
            + " order by c.sendTime desc", ChatMessage.class)
        .setParameter("sender", sender)
        .getResultList();
  }










}
package com.biehnary.auction.live_auction.Repository;

import com.biehnary.auction.live_auction.entity.Bid;
import com.biehnary.auction.live_auction.entity.Member;
import com.biehnary.auction.live_auction.entity.Product;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.Map;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class BidRepository {

  @PersistenceContext
  private EntityManager em;

  // == CURD Operation ==
  // no delete - all bids stay in the system for audit purpose
  public Bid save(Bid bid) {
    if (bid.getId() == null) {
      em.persist(bid);
      return bid;
    } else {
      return em.merge(bid);
    }
  }

  public Bid findById(Long bidId) {
    Bid bid = em.find(Bid.class, bidId);
    if (bid == null) {
      throw new IllegalArgumentException("Bid not found" + bidId);
    }
    return bid;
  }

  public List<Bid> findAll() {
    return em.createQuery("select b from Bid b", Bid.class)
        .getResultList();
  }


  public Long count() {
    return em.createQuery("select count(b) from Bid b", Long.class)
        .getSingleResult();
  }

  public boolean existsById(Long bidId) {
    Long count = em.createQuery("select count(b) from Bid b where b.id = :id", Long.class)
        .setParameter("id", bidId)
        .getSingleResult();
    return count > 0;
  }

  // == Utilities ==
  public List<Bid> findRecentBidsByProduct(Product product, int limit) {
    return em.createQuery("select b from Bid b where b.product = :product order by b.bidTime desc "
        , Bid.class)
        .setParameter("product", product)
        .setMaxResults(limit)
        .getResultList();
  }

  public Long countDistinctBiddersByProduct(Product product) {
    return em.createQuery("select count(distinct b.bidder) from Bid b where b.product = :product"
            , Long.class)
        .setParameter("product", product)
        .getSingleResult();
  }

  public Bid findHighestBidByProduct(Product product) {
    List<Bid> results = em.createQuery(
            "select b from Bid b where b.product = :product order by b.bidAmount desc",
            Bid.class)
        .setParameter("product", product)
        .setMaxResults(1)
        .getResultList();

    return results.isEmpty() ? null : results.getFirst();
  }

  public List<Bid> findByBidder(Member bidder) {
    return em.createQuery("select b from Bid b where b.bidder = :bidder order by b.bidTime desc",
            Bid.class)
        .setParameter("bidder", bidder)
        .getResultList();
  }














}package com.biehnary.auction.live_auction.entity;

import jakarta.persistence.*;
import lombok.Getter;

import java.time.LocalDateTime;
import lombok.Setter;

@Entity
@Getter
public class Product {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  private String name;
  private int price;
  private String imageUrl;
  private String description;

  @ManyToOne
  @JoinColumn(name = "seller_id")
  private Member seller;

  @Enumerated(EnumType.STRING)
  private AuctionStatus auctionStatus;
  private LocalDateTime registeredAt;

  // == field crud ==
  public static Product createProduct(String name, int price, String imageUrl, String description,
      Member seller) {
    Product product = new Product();
    product.name = name;
    product.price = price;
    product.imageUrl = imageUrl;
    product.description = description;
    product.seller = seller;
    product.auctionStatus = AuctionStatus.WAITING;
    product.registeredAt = LocalDateTime.now();
    return product;
  }

  public void updateProduct(String name, int price, String imageUrl, String description) {
    this.name = name;
    this.price = price;
    this.imageUrl = imageUrl;
    this.description = description;
  }

  public void changeAuctionStatus(AuctionStatus newStatus) {
    this.auctionStatus = newStatus;
  }







}
package com.biehnary.auction.live_auction.entity;

import jakarta.persistence.*;
import lombok.Getter;

import java.time.LocalDateTime;

@Entity
@Getter
@Table(indexes = {@Index(name = "Idx_product_bidTime", columnList = "product_id, bidTime"),
                  @Index(name = "Idx_product_bidAmount", columnList = "product_id, bidAmount")})
public class Bid {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private int bidAmount;

  @Enumerated(EnumType.STRING)
  private BidType bidType;

  private LocalDateTime bidTime;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "product_id")
  private Product product;


  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "bidder_id")
  private Member bidder;

  // methods
  public static Bid createBid(Product product, Member bidder, int bidAmount) {
    Bid bid = new Bid();
    bid.product = product;
    bid.bidder = bidder;
    bid.bidAmount = bidAmount;
    bid.bidTime = LocalDateTime.now();
    bid.bidType = (product.getAuctionStatus() == AuctionStatus.WAITING)
        ? BidType.PRE_BID : BidType.LIVE_BID;
    return bid;
  }







}
package com.biehnary.auction.live_auction.entity;

public enum AuctionStatus {
  WAITING,
  LIVE,
  COMPLETED,
  FAILED,
  RE_AUCTION

}
package com.biehnary.auction.live_auction.entity;

import jakarta.persistence.*;

import java.time.LocalDateTime;
import lombok.Getter;

@Entity
@Getter
public class AuctionResult {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name = "product_id")
  private Product product;

  @ManyToOne
  @JoinColumn(name = "winner_id")
  private Member winner;

  private int finalPrice;
  private LocalDateTime auctionEndTime;

  @Enumerated(EnumType.STRING)
  private ResultStatus status;
}
package com.biehnary.auction.live_auction.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.AccessLevel;
import lombok.Getter;

import java.time.LocalDateTime;
import lombok.Setter;

@Entity
@Getter
public class Member {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  private String username;
  private String password;
  private LocalDateTime joinDate;
  private Boolean isActive;

  // ==Methods==

  // factory method. it needs to return
  public static Member createMember(String username, String password) {
    Member member = new Member();
    member.username = username;
    member.password = password;
    member.joinDate = LocalDateTime.now();
    member.isActive = true;
    return member;
  }

  public void changePassword(String password) {
    this.password = password;
  }

  // update
  public void updateInfo(String username) {
    this.username = username;
  }

  // member activation
  public void activate() {
    this.isActive = true;
  }

  public void deactivate() {
    this.isActive = false;
  }












}

package com.biehnary.auction.live_auction.entity;

import jakarta.persistence.*;

import java.time.LocalDateTime;

@Entity
public class ChatMessage {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @ManyToOne
  @JoinColumn(name = "sender_id")
  private Member sender;

  private String content;
  private LocalDateTime sendTime;
}
package com.biehnary.auction.live_auction.entity;

public enum BidType {
  PRE_BID,
  LIVE_BID
}
package com.biehnary.auction.live_auction.entity;

public enum ResultStatus {
  COMPLETED,
  FAILED,
  CANCELLED
}
package com.biehnary.auction.live_auction.service;

import com.biehnary.auction.live_auction.Repository.MemberRepository;
import com.biehnary.auction.live_auction.entity.Member;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

// minimal member management for mvp
@Service
public class MemberService {

  private final MemberRepository memberRepository;

  // Generator injection - spring
  public MemberService(MemberRepository memberRepository) {
    this.memberRepository = memberRepository;
  }

  public void join(String username, String password) {
    Member member = Member.createMember(username, password);
    memberRepository.save(member);
  }

  @Transactional
  public void updateMember(Long memberId, String newUsername, String newPassword) {
    Member member = memberRepository.findById(memberId);
    member.changePassword(newPassword);
    member.setUsername(newUsername);
  }

  // soft delete for logs
  @Transactional
  public void deactivateMember(Long memberId) {
    Member member = memberRepository.findById(memberId);
    member.deactivate();
  }












}
package com.biehnary.auction.live_auction.service;

import com.biehnary.auction.live_auction.Repository.ProductRepository;
import com.biehnary.auction.live_auction.entity.AuctionStatus;
import com.biehnary.auction.live_auction.entity.Member;
import com.biehnary.auction.live_auction.entity.Product;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ProductService {
  private final ProductRepository productRepository;

  public ProductService(ProductRepository productRepository) {
    this.productRepository = productRepository;
  }

  @Transactional
  public Product registerProduct(String name, int price, String imageUrl,
      String description, Member seller) {
    Product product = Product.createProduct(name, price, imageUrl, description, seller);
    return productRepository.save(product);
  }

  @Transactional
  public void updateProduct(Long productId,String name, int price, String imageUrl,
      String description) {
    Product product = productRepository.findById(productId);
    product.updateProduct(name, price, imageUrl, description);
  }

  @Transactional
  public void deleteProduct(Long productId) {
    Product product = productRepository.findById(productId);
    // 제한사항
    if (product.getAuctionStatus() == AuctionStatus.LIVE) {
      throw new IllegalStateException("진행 중인 경매는 삭제할 수 없습니다.");
    }

    productRepository.delete(product);
  }

  @Transactional
  public void changeAuctionStatus(Long productId, AuctionStatus status) {
    Product product = productRepository.findById(productId);
    product.changeAuctionStatus(status);
  }








}
package com.biehnary.auction.live_auction.service;

import com.biehnary.auction.live_auction.Repository.MemberRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
public class BidService {

  private final MemberRepository memberRepository;

  public void placeBid()
}
package com.biehnary.auction.live_auction;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LiveAuctionApplication {

  public static void main(String[] args) {
    SpringApplication.run(LiveAuctionApplication.class, args);
  }

}
