명세서

# BidRepository 개발 진행 현황 - 세션 인계서

## 📋 프로젝트 컨텍스트

### 프로젝트 개요
- **프로젝트명**: 실시간 애장품 경매 플랫폼 (Live Auction)
- **핵심 컨셉**: "24시간 라이브 경매장" - 선입찰 + 실시간 경매 하이브리드
- **패키지 구조**: `com.biehnary.auction.live_auction`
- **현재 작업**: Repository 레이어 구현 단계

### 개발 환경 및 스타일
- **IDE**: IntelliJ IDEA Ultimate
- **코딩 스타일**: Google Java Style Guide 적용
- **들여쓰기**: 2 스페이스 (기본), 4 스페이스 (continuation)
- **컬럼 제한**: 100자 기준선 (flexible)

## 🎯 BidRepository 설계 철학

### 핵심 설계 결정사항
- **입찰 데이터 = 불변 로그**: 생성만 가능, 수정/삭제 불가
- **Delete 메서드 배제**: "no delete - all bids stay in the system for audit purpose"
- **성능 우선**: 메모리보다 응답 속도 최적화
- **실용주의**: 완벽한 규칙보다 가독성과 실용성

### 비즈니스 요구사항
- **라이브함 연출**: 실시간 경쟁 상황 시각화
- **참여자 수 중심**: 입찰 횟수보다 실제 관심 인원수가 중요
- **최근 20개 로그**: 과거 데이터보다 현재 상황 포커스

## 🚀 다음 단계 계획

### 1. Repository 레이어 완성
- 남은 메서드들 구현
- 통합 테스트 작성

### 2. Service 레이어 구현
- BidService 클래스 생성
- 비즈니스 로직 구현 (입찰 검증, 중복 체크 등)
- Repository 메서드 조합한 복합 기능

### 3. Controller 레이어
- REST API 엔드포인트 구현
- 실시간 폴링용 JSON 응답 API

### 4. 실시간 기능
- 5초 간격 폴링 JavaScript 구현
- 프론트엔드 업데이트 애니메이션

## 🛠️ 기술적 이슈 & 해결 방안

### Git 권한 문제 (해결완료)
- **문제**: 레포지토리 이름 변경 후 403 에러
- **해결**: SSH 키 기반 인증으로 전환
- **결과**: `git@github.com:biehnary/hybrid-auction.git` 정상 동작

### 코드 스타일 통일
- **Google Java Style Guide** 적용
- **연속 들여쓰기**: 4 스페이스 (총 6 스페이스)
- **100자 컬럼 제한**: 참고 가이드라인으로 활용

### JPQL vs SQL 문법 구분
- **LIMIT** → `setMaxResults()` 메서드 사용
- **COUNT DISTINCT** 정상 동작 확인
- **파라미터 바인딩** 일관성 유지

## 💡 설계 인사이트 & 학습 포인트

### 도메인 특성 반영
- **입찰 = 불변 기록**: 실제 경매와 동일한 특성
- **로그 vs 트랜잭션 데이터**: 서로 다른 접근 방식 적용
- **실시간성 vs 일관성**: 비즈니스 요구사항에 맞는 트레이드오프

### 성능 최적화 사고
- **인덱스 설계**: 쿼리 패턴 분석 후 최적화
- **메모리 vs 성능**: 현대적 접근 방식 채택
- **N+1 문제 방지**: LAZY 로딩 및 적절한 쿼리 설계

### 실무적 판단
- **규칙 vs 실용성**: 코딩 스타일 가이드의 유연한 적용
- **완벽주의 vs 진행**: MVP 우선 접근법
- **자동화 vs 수작업**: 상황에 맞는 선택
